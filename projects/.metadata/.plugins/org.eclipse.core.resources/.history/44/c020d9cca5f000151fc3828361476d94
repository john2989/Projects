import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Set;

import javax.lang.model.SourceVersion;
import javax.tools.Tool;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.filecache.DistributedCache;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.Job;


public class IPDriver extends Configured implements Tool{

	public static void main(String[] args) throws Exception {
		int res = ToolRunner.run(new IPDriver(),args);
		System.exit(res);
	}
	
	public int run(String[] args) throws Exception {
		Job job = new Job(super.getConf());
	    //DistributedCache.addFileToClassPath(new Path("/user/training/jar/joda-time-2.0"), conf);
	    
	    job.setJarByClass(IPDriver.class);
	    job.setJobName("DDOS Detection");
	    job.setNumReduceTasks(20);

	    FileInputFormat.setInputPaths(job, new Path(args[0]));
	    FileOutputFormat.setOutputPath(job, new Path(args[1]));
	    
	    
	    job.setOutputKeyClass(Text.class);
	    job.setOutputValueClass(IntWritable.class);
	 
	    job.setMapperClass(IPMapper.class);
	    job.setReducerClass(IPReducer.class);
	    

	    
	    boolean success = job.waitForCompletion(true);
	    return success ? 0 : 1;
	  }

  /*public static void main(String[] args) throws Exception {

    if (args.length != 2) {
      System.out.printf(
          "Usage: DDOS Detection <input dir> <output dir>\n");
      System.exit(-1);
    }
   
    Configuration conf = new Configuration();*/
    
    // Add 3rd-party libraries
    /*addJarToDistributedCache(DateTime.class, conf);
    addJarToDistributedCache(DateTimeConstants.class, conf);
    addJarToDistributedCache(DateTimeFormat.class, conf);
    addJarToDistributedCache(DateTimeFormatter.class, conf);*/

    
  /*private static void addJarToDistributedCache(
	        Class classToAdd, Configuration conf)
	    throws IOException {
	 
	    // Retrieve jar file for class2Add
	    String jar = classToAdd.getProtectionDomain().
	            getCodeSource().getLocation().
	            getPath();
	    File jarFile = new File(jar);
	 
	    // Declare new HDFS location
	    Path hdfsJar = new Path("/user/training/jar"
	            + jarFile.getName());
	 
	    // Mount HDFS
	    FileSystem hdfs = FileSystem.get(conf);
	 
	    // Copy (override) jar file to HDFS
	    hdfs.copyFromLocalFile(false, true,
	        new Path(jar), hdfsJar);
	 
	    // Add jar to distributed classPath
	    DistributedCache.addFileToClassPath(hdfsJar, conf);
	}*/

}
